// =====================================
// Prisma Schema for Seller-Buyer Bidding System
// =====================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ============================
// ENUMS
// ============================
//

enum Role {
  BUYER
  SELLER
}

enum ProjectStatus {
  PENDING           // Newly created project
  IN_PROGRESS       // Seller selected and project started
  IN_REVIEW         // Deliverable submitted and under review
  CHANGES_REQUESTED // Buyer requested changes
  COMPLETED         // Approved and finalized
  CANCELLED         // Project withdrawn
}

enum Currency {
  USD
  EUR
  INR
  GBP
  CAD
  AUD
  JPY
  // Extendable as needed
}

//
// ============================
// MODELS
// ============================
//

model User {
  id               String         @id @default(cuid())
  name             String?
  description      String?
  profileImage     String?        @default("https://img.freepik.com/premium-vector/user-profile-icon-flat-style-member-avatar-vector-illustration-isolated-background-human-permission-sign-business-concept_157943-15752.jpg?semt=ais_hybrid&w=740")
  email            String         @unique
  password         String?        // Optional for OAuth (e.g., Firebase)
  firebaseId       String?        @unique
  role             Role

  // Relations
  bids             Bid[]
  projects         Project[]      @relation("BuyerProjects")
  ratings          Rating[]       @relation("BuyerRatings")      // Ratings given by buyer
  receivedRatings  Rating[]       @relation("SellerRatings")     // Ratings received as seller
  rating           Float?         // Average rating (for sellers)

  // Chat relations
  sentMessages     Message[]      @relation("SentMessages")
  sentConversations     Conversation[] @relation("SentConversations")
  receivedConversations Conversation[] @relation("ReceivedConversations")
}

model Project {
  id             String         @id @default(cuid())
  title          String
  description    String
  budget         String
  budgetCurrency Currency       @default(USD)
  deadline       DateTime
  status         ProjectStatus  @default(PENDING)
  progress       Int            @default(0) // Optional progress tracking %
  reminderSent   Boolean        @default(false)

  // Relations
  buyerId        String
  buyer          User           @relation("BuyerProjects", fields: [buyerId], references: [id])
  bids           Bid[]
  deliverable    Deliverable?
  selectedBidId  String?        @unique
  selectedBid    Bid?           @relation("SelectedBid", fields: [selectedBidId], references: [id])
  rating         Rating?

  // Timestamps
  createdAt      DateTime?      @default(now())
  updatedAt      DateTime?      @updatedAt
}

model Bid {
  id           String   @id @default(cuid())
  sellerName   String
  amount       Int
  durationDays Int
  message      String

  // Relations
  projectId    String
  sellerId     String
  project      Project  @relation(fields: [projectId], references: [id])
  seller       User     @relation(fields: [sellerId], references: [id])
  selectedFor  Project? @relation("SelectedBid") // Reverse relation from Project

  // Timestamps
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
}

model Deliverable {
  id         String   @id @default(cuid())
  fileUrl    String

  // Relation
  projectId  String   @unique
  project    Project  @relation(fields: [projectId], references: [id])
}

model Rating {
  id        String   @id @default(cuid())
  value     Int      // Range: 1 to 5
  comment   String?

  // Relations
  buyerId   String
  sellerId  String
  projectId String   @unique
  project   Project  @relation(fields: [projectId], references: [id])
  buyer     User     @relation("BuyerRatings", fields: [buyerId], references: [id])
  seller    User     @relation("SellerRatings", fields: [sellerId], references: [id])
}

model Conversation {
  id           String   @id @default(cuid())
  senderId     String
  receiverId   String

  sender       User     @relation("SentConversations", fields: [senderId], references: [id])
  receiver     User     @relation("ReceivedConversations", fields: [receiverId], references: [id])
  lastMessage  String?
  lastUpdated  DateTime @default(now())

  messages     Message[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([senderId, receiverId]) // Prevent duplicate conversations
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  senderId       String
  text           String
  seen           Boolean     @default(false)

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
